{"version":3,"sources":["chips/chip.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,SAAS,EACT,UAAU,EACV,YAAY,EACZ,KAAK,EAGL,MAAM,EACN,QAAQ,EACT,MAAM,eAAe;OAGf,EAAC,qBAAqB,EAAC,MAAM,mCAAmC;AAMvE;;GAEG;AAcH;IAeE,gBAAsB,SAAmB,EAAY,WAAuB;QAAtD,cAAS,GAAT,SAAS,CAAU;QAAY,gBAAW,GAAX,WAAW,CAAY;QAb5E,0CAA0C;QAChC,cAAS,GAAY,IAAI,CAAC;QAEpC;;WAEG;QACH,YAAO,GAAG,IAAI,YAAY,EAAe,CAAC;QAE1C;;WAEG;QACO,YAAO,GAAG,IAAI,YAAY,EAAe,CAAC;IAE2B,CAAC;IAEhF,yBAAQ,GAAR;QACE,IAAI,EAAE,GAAgB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QAErD,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,SAAS,IAAI,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACzE,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAED,4BAAW,GAAX;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACpC,CAAC;IAGQ,sBAAI,4BAAQ;QADrB,2CAA2C;aAClC;YACP,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;QAED,2CAA2C;aAC3C,UAAa,KAAc;YACzB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;QAC9D,CAAC;;;OALA;IAQD,sBAAI,mCAAe;QADnB,6DAA6D;aAC7D;YACE,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtD,CAAC;;;OAAA;IAED,oDAAoD;IACpD,sBAAK,GAAL;QACE,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAC5E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACpC,CAAC;IAED,+CAA+C;IAC/C,6BAAY,GAAZ,UAAa,KAAY;QACvB,iBAAiB;QACjB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;IACH,CAAC;IA9CD;QAAC,MAAM,EAAE;;2CAAA;IAiBT;QAAC,KAAK,EAAE;;0CAAA;IA3CV;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,oDAAoD;YAC9D,QAAQ,EAAE,2BAA2B;YACrC,IAAI,EAAE;gBACJ,UAAU,EAAE,IAAI;gBAChB,MAAM,EAAE,QAAQ;gBAEhB,iBAAiB,EAAE,UAAU;gBAC7B,sBAAsB,EAAE,iBAAiB;gBAEzC,SAAS,EAAE,sBAAsB;aAClC;SACF,CAAC;;cAAA;IA6DF,aAAC;AAAD,CA5DA,AA4DC,IAAA","file":"chip.js","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer\n} from '@angular/core';\n\nimport {MdFocusable} from '../core/a11y/list-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n\n/**\n * A material design styled Chip component. Used inside the ChipList component.\n */\n@Component({\n  selector: 'md-basic-chip, [md-basic-chip], md-chip, [md-chip]',\n  template: `<ng-content></ng-content>`,\n  host: {\n    'tabindex': '-1',\n    'role': 'option',\n\n    '[attr.disabled]': 'disabled',\n    '[attr.aria-disabled]': '_isAriaDisabled',\n\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MdChip implements MdFocusable, OnInit, OnDestroy {\n\n  /* Whether or not the chip is disabled. */\n  protected _disabled: boolean = null;\n\n  /**\n   * Emitted when the chip is focused.\n   */\n  onFocus = new EventEmitter<MdChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   */\n  @Output() destroy = new EventEmitter<MdChipEvent>();\n\n  constructor(protected _renderer: Renderer, protected _elementRef: ElementRef) {}\n\n  ngOnInit(): void {\n    let el: HTMLElement = this._elementRef.nativeElement;\n\n    if (el.nodeName.toLowerCase() == 'md-chip' || el.hasAttribute('md-chip')) {\n      el.classList.add('md-chip');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy.emit({ chip: this });\n  }\n\n  /** Whether or not the chip is disabled. */\n  @Input() get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /** Sets the disabled state of the chip. */\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value) ? true : null;\n  }\n\n  /** A String representation of the current disabled state. */\n  get _isAriaDisabled(): string {\n    return String(coerceBooleanProperty(this.disabled));\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');\n    this.onFocus.emit({ chip: this });\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.focus();\n    }\n  }\n}\n"]}