{"version":3,"sources":["chips/chip-list.ts"],"names":[],"mappings":"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","file":"chip-list.js","sourcesContent":["import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  ModuleWithProviders,\n  NgModule,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {ListKeyManager} from '../core/a11y/list-key-manager';\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n *\n * Example:\n *\n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-chip-list',\n  template: `<div class=\"md-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  host: {\n    // Properties\n    'tabindex': '0',\n    'role': 'listbox',\n    'class': 'md-chip-list',\n\n    // Events\n    '(focus)': '_keyManager.focusFirstItem()',\n    '(keydown)': 'keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MdChipList implements AfterContentInit {\n\n  /** Track which chips we're listening to for focus/destruction. */\n  private _subscribed: WeakMap<MdChip, boolean> = new WeakMap();\n\n  /** The ListKeyManager which handles focus. */\n  _keyManager: ListKeyManager;\n\n  /** The chip components contained within this chip list. */\n  chips: QueryList<MdChip>;\n\n  constructor(private _elementRef: ElementRef) {}\n\n  ngAfterContentInit(): void {\n    this._keyManager = new ListKeyManager(this.chips).withFocusWrap();\n\n    // Go ahead and subscribe all of the initial chips\n    this.subscribeChips(this.chips);\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this.subscribeChips(chips);\n    });\n  }\n\n  /** Pass relevant key presses to our key manager. */\n  keydown(event: KeyboardEvent) {\n    this._keyManager.onKeydown(event);\n  }\n\n  /**\n   * Iterate through the list of chips and add them to our list of\n   * subscribed chips.\n   *\n   * @param chips The list of chips to be subscribed.\n   */\n  protected subscribeChips(chips: QueryList<MdChip>): void {\n    chips.forEach(chip => this.addChip(chip));\n  }\n\n  /**\n   * Add a specific chip to our subscribed list. If the chip has\n   * already been subscribed, this ensures it is only subscribed\n   * once.\n   *\n   * @param chip The chip to be subscribed (or checked for existing\n   * subscription).\n   */\n  protected addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._subscribed.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip.onFocus.subscribe(() => {\n      let chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this.isValidIndex(chipIndex)) {\n        this._keyManager.updateFocusedItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and check focus\n    chip.destroy.subscribe(() => {\n      let chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this.isValidIndex(chipIndex)) {\n        // Check whether the chip is the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setFocus(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setFocus(chipIndex - 1);\n        }\n      }\n\n      this._subscribed.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._subscribed.set(chip, true);\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns {boolean} True if the index is valid for our list of chips.\n   */\n  private isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n}\n\n@NgModule({\n  imports: [],\n  exports: [MdChipList, MdChip],\n  declarations: [MdChipList, MdChip]\n})\nexport class MdChipsModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdChipsModule,\n      providers: []\n    };\n  }\n}\n"]}